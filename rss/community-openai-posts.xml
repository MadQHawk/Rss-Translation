<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>OpenAI 开发者论坛 - 最新帖子</title>
    <link>https://community.openai.com</link>
    <description>最新帖子</description>
    <lastBuildDate>Sun, 05 May 2024 12:32:00 GMT</lastBuildDate>
    <item>
      <title>使用 gpt-4 API 对文档进行语义分块</title>
      <link>https://community.openai.com/t/using-gpt-4-api-to-semantically-chunk-documents/715689?page=3#post_45</link>
      <description><![CDATA[我想在@jr.2509向我指出这一点后我会插话线程，再次感谢@jr.2509。
用于上下文；我正在开发一个应用程序，该应用程序需要 pdf 格式的（非结构化）简历和包含占位符的 docx 模板。 （例如 {firstname} 或 {jobexperience.startyear}。然后，应用程序会创建模板的副本，但会用 pdf 简历中的数据替换所有占位符。最终结果：外观相似的简历 + 您可以使用的结构化数据（例如，翻译等）
这是我的工作流程：

从 pdf 中提取文本
提示开放 AI

系统提示：您是一台信息检索机器，它获取非结构化简历，根据提供的 json 模式对其进行结构化，并仅输出 json
用户提示：生成简历的结构化表示。缺少信息必须用“#####”表示。将多个数据出现作为数组处理。该结构应包含以下字段并遵循以下 json 架构
然后是所需的 JSON 架构。我包括嵌套对象，例如认证开始年份、机构等。示例：
&quot;工作经验&quot;: [
        {
            &quot;company&quot;: &quot;[公司名称]&quot;,
            &quot;地点&quot;: &quot;[位置]&quot;,
            &quot;jobtitle&quot;: &quot;[职位名称]&quot;,
            &quot;description&quot;: &quot;[工作的完整描述]&quot;,
            &quot;toolsandtechniques&quot;: &quot;[工具、技术、技能、环境]&quot;,
            &quot;startyear&quot;: &quot;[工作开始年份]&quot;,
            &quot;endyear&quot;: &quot;[工作结束年份]&quot;
        }
    ]
}

对于并不总是获得 100% 效果的实体，我提供了一些示例来应用少量镜头提示。我有两个例子来说明输入简历工作经历可能是什么样子以及结构化表示应该如何结束。这非常有效，可能会帮助您定义“逻辑单位”@jr.2509！我还应该为语言实现一个，因为在一些简历中，人们会指定他们对不同语言的擅长程度，然后法学硕士有时会创建一个新的嵌套对象（我的应用程序只需要下游的一个键/值对“语言”）。所以这将是这样的：
示例 1：
语言：英语、荷兰语、印地语

结构化表示：
{
    语言：“英语、荷兰语、印地语”
}

示例2：
语言
英语：母语
日语：A2
中文：书面能力

结构化表示：
{
    语言：“英语、日语、中文”
}

我当前的挑战是非常大的简历（有些大约 6k 代币）。然后，LLM 确实会回复一个有效的 JSON 对象，但它会缩短工作经验，有时还会缩短个人资料描述，以便符合令牌限制。
我正在考虑拆分，但无法让递归文本拆分与我当前的设置很好地配合（Buildship 规范了换行符）。
我想尝试的下一件事是（这在前面提到过）包含工作经验的第一句话和最后一句话（因为这是包含最多标记的内容）并以编程方式重建完整的工作经验。这很有趣，因为几个月前我为了节省成本就这么做了，但后来放弃了这个想法。可能会回到过去。可能会用一些镜头提示示例来确保第一个和最后一个词是唯一的（有时人们会以相同的方式描述不同的工作经历）。
linenoXXX 方法也很有趣，但我觉得它没有充分利用 LLM 的力量。只是我的想法。
会及时通知大家。如果您有任何其他绕过令牌限制的想法，请告诉我。
格茨]]></description>
      <guid>https://community.openai.com/t/using-gpt-4-api-to-semantically-chunk-documents/715689?page=3#post_45</guid>
      <pubDate>Sun, 05 May 2024 12:09:07 GMT</pubDate>
    </item>
    <item>
      <title>为什么我的 gpt4 不断给我 gpt3.5 响应</title>
      <link>https://community.openai.com/t/why-does-my-gpt4-keep-giving-me-gpt3-5-responses/736709#post_2</link>
      <description><![CDATA[这很正常，我们已经等了 4 个月了，他们才修复故障。
GPT 自 2024 年 1 月起就不再工作，但他们似乎不想修复它。]]></description>
      <guid>https://community.openai.com/t/why-does-my-gpt4-keep-giving-me-gpt3-5-responses/736709#post_2</guid>
      <pubDate>Sun, 05 May 2024 11:45:04 GMT</pubDate>
    </item>
    <item>
      <title>Safari PWA 的聊天支持刚刚中断</title>
      <link>https://community.openai.com/t/chat-support-for-safari-pwa-just-broke/736743#post_1</link>
      <description><![CDATA[在过去的 6 个月里，我一直使用 ChatGPT 作为 Safari Web 应用程序（又名“添加到扩展坞”），效果非常好。我有一个通过 BTT 切换到聊天的全局快捷方式，这比尝试查找选项卡（或选项卡之一）要快得多。不幸的是，今天早上的聊天改变了它处理 Auth/OAuth 流程的方式，现在每次我尝试打开 safari Web 应用程序时，它都会使用我的默认浏览器在新窗口中打开聊天。 IE。无法登录并继续使用它。
请有人找到解决办法。我喜欢我的全局键盘快捷键，并且不想编写宏来切换浏览器选项卡。
重现步骤；在 Safari 上打开聊天 → 使用“添加到扩展坞”功能 → 使用聚光灯将聊天作为应用程序打开 → [如果还没有。] 使登录令牌无效（注销）→ 尝试登录。将出现新的浏览器窗口并让您登录，但网络应用程序永远不会打开/获取令牌。
可能只是我一个人的问题，如果我为遇到相同问题的人找到更多技术细节/解决方法，我会更新。
编辑：通过通过 safari 登录并重新制作网络应用程序，我能够让它再次工作。]]></description>
      <guid>https://community.openai.com/t/chat-support-for-safari-pwa-just-broke/736743#post_1</guid>
      <pubDate>Sun, 05 May 2024 11:43:38 GMT</pubDate>
    </item>
    <item>
      <title>GPT4 症状再次复发</title>
      <link>https://community.openai.com/t/gpt4-symptoms-have-returned-again/736661#post_3</link>
      <description><![CDATA[我厌倦了这种情况；我这周有很多作业要完成，尤其是学术课程……OAI 的不负责任真的很不幸。]]></description>
      <guid>https://community.openai.com/t/gpt4-symptoms-have-returned-again/736661#post_3</guid>
      <pubDate>Sun, 05 May 2024 11:43:33 GMT</pubDate>
    </item>
    <item>
      <title>使用gpt将大量数据结构化为json格式</title>
      <link>https://community.openai.com/t/using-gpt-to-structure-large-amounts-of-data-to-json-format/736209#post_9</link>
      <description><![CDATA[很好的讨论，感谢您的链接。事实上，我几个月前就曾经实施过你的方法，以节省成本。我会考虑一下并尝试是否可以在另一个线程中加入。]]></description>
      <guid>https://community.openai.com/t/using-gpt-to-structure-large-amounts-of-data-to-json-format/736209#post_9</guid>
      <pubDate>Sun, 05 May 2024 11:38:31 GMT</pubDate>
    </item>
    <item>
      <title>ChatGPT 作为对每个人都有帮助的工具</title>
      <link>https://community.openai.com/t/chatgpt-as-a-helpful-tool-for-everyone/736738#post_1</link>
      <description><![CDATA[（主题已被作者删除）]]></description>
      <guid>https://community.openai.com/t/chatgpt-as-a-helpful-tool-for-everyone/736738#post_1</guid>
      <pubDate>Sun, 05 May 2024 11:38:01 GMT</pubDate>
    </item>
    <item>
      <title>GPT4 症状再次出现</title>
      <link>https://community.openai.com/t/gpt4-symptoms-have-returned-again/736661#post_2</link>
      <description><![CDATA[就我而言，自 GPT 停止工作且未遵循任何指示以来，已经过去近 4 个月了。即使是最简单的指令。]]></description>
      <guid>https://community.openai.com/t/gpt4-symptoms-have-returned-again/736661#post_2</guid>
      <pubDate>Sun, 05 May 2024 11:26:18 GMT</pubDate>
    </item>
    <item>
      <title>使用gpt将大量数据结构化为json格式</title>
      <link>https://community.openai.com/t/using-gpt-to-structure-large-amounts-of-data-to-json-format/736209#post_8</link>
      <description><![CDATA[根据您选择的结构，您可能需要查看此线程：




使用 gpt-4 API 对文档进行语义分块 &lt; a class=&quot;badge-category__wrapper &quot; href=&quot;https://community.openai.com/c/api/7&quot;&gt;API

  &lt;块引用&gt;
    我正在根据这篇文章开发的对话线索创建这个主题： RAG 并不是真正的解决方案 - #43 by SomebodySysop
虽然我们中的许多人对第一层“语义分块”有不同的方法，例如 @sergeliatko的 API： RAG 并不是真正的解决方案 - #50 by sergeliatko 我们仍在寻找一种方法让法学硕士做最后一点“子分块”，我们不是简单地按大小切分块，而是让模型来查看它并确定…
  

包括我在内的一些论坛成员讨论并制定了使用 GPT-4-turbo 对文档进行语义分块的解决方案。本质上，该方法涉及使用 GPT-4-turbo 创建文档大纲（包括文档中各个部分的开始和结束位置的标识），然后使用该信息以编程方式从文档中逐字提取文本。将文档转换为结构化 JSON。
这种方法的好处是，您只需要一次 API 调用即可获取文档的基本结构，并且不必担心输出令牌约束。此外，与要求模型逐字返回文本的场景相比，它节省了大量成本。也就是说，该方法目前主要适用于具有明确定义部分的文档。]]></description>
      <guid>https://community.openai.com/t/using-gpt-to-structure-large-amounts-of-data-to-json-format/736209#post_8</guid>
      <pubDate>Sun, 05 May 2024 11:16:28 GMT</pubDate>
    </item>
    </channel>
</rss>